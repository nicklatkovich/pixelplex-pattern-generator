{"version":3,"sources":["scripts/validators.ts","scripts/point.ts","scripts/generator.ts","scripts/grid.ts","scripts/random.ts","components/PatternFill.tsx","components/PatternRaw.tsx","components/App.tsx","index.tsx"],"names":["validateInt","num","Number","isSafeInteger","Error","validatePositiveInt","CELL","Point","x","y","_x","_y","this","other","add","Math","max","mul","Grid","width","height","fill","_width","_height","_data","Array","map","_","point","isInBounds","pos","onlyIfInBounds","value","f","get","i","floor","rand","base","random","pointZero","neighbors","arr","right","bottom","diagonals","possibleCornerLocks","generate","size","grid","EMPTY","start","cornerLocksIndex","length","cornerLocks","pillar","console","log","cornerLock","lockPos","set","LOCKED","POTENTIAL","points","posIndex","last","pop","DIAG","includes","FILLED","near","j","push","transform","cell","PatternFill","props","filled","Component","PatternRaw","lines","x1","y1","x2","y2","stroke","strokeWidth","drawCell","App","context","state","id","onClick","setState","type","defaultChecked","onChange","e","target","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b78e30c.chunk.js","sourcesContent":["export function validateInt(num: number): number {\n\tif (!Number.isSafeInteger(num)) throw new Error(\"is not a safe integer\");\n\treturn num;\n}\n\nexport function validatePositiveInt(num: number): number {\n\tnum = validateInt(num);\n\tif (num <= 0) throw new Error(\"is not positive\");\n\treturn num;\n}\n","import { validateInt } from \"./validators\";\n\nexport class Point {\n\tstatic get ZERO(): Point { return new Point(0, 0); }\n\tpublic get x(): number { return this._x; }\n\tpublic get y(): number { return this._y; }\n\tprivate _x: number;\n\tprivate _y: number;\n\tconstructor(x: number, y: number) {\n\t\tthis._x = validateInt(x);\n\t\tthis._y = validateInt(y);\n\t}\n\tpublic add(other: Point | number): Point {\n\t\tif (typeof other === \"number\") return this.add(new Point(other, other));\n\t\treturn new Point(this.x + other.x, this.y + other.y);\n\t}\n\tpublic max(other: Point): Point { return new Point(Math.max(this.x, other.x), Math.max(this.y, other.y)); }\n\tpublic mul(other: number | Point): Point {\n\t\tif (typeof other === \"number\") return this.mul(new Point(other, other));\n\t\treturn new Point(this.x * other.x, this.y * other.y);\n\t}\n\tpublic eq(other: Point): boolean { return this.x === other.x && this.y === other.y; }\n}\n","import { Grid } from \"./grid\";\nimport { Point } from \"./point\";\nimport { rand } from \"./random\";\n\nexport enum CELL {\n\tEMPTY = 0,\n\tPOTENTIAL = 1,\n\tFILLED = 2,\n\tLOCKED = 3,\n\tDIAG = 4,\n}\n\nexport const pointZero = new Point(0, 0);\nexport const neighbors: Point[] = [1, 0, -1, 0].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\nexport const [right, top, left, bottom] = neighbors;\nexport const diagonals: Point[] = [1, -1, -1, 1].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\n\nexport const possibleCornerLocks: Point[][] = [\n\t[],\n\t[pointZero],\n\t[pointZero, right],\n\t[pointZero, bottom],\n\t[pointZero, right, bottom],\n];\n\nexport function generate(size: number): Grid<boolean> {\n\tconst grid = new Grid(size, size, () => CELL.EMPTY);\n\tconst start = new Point(rand(grid.width), rand(grid.height));\n\tfor (let i = 0; i < 4; i++) {\n\t\tconst cornerLocksIndex = rand(possibleCornerLocks.length);\n\t\tconst cornerLocks = possibleCornerLocks[cornerLocksIndex];\n\t\tconst pillar = diagonals[i].max(pointZero).mul(grid.size.add(-1));\n\t\tconsole.log('pillar', pillar);\n\t\tfor (const cornerLock of cornerLocks) {\n\t\t\tconsole.log('cornerLock', cornerLock);\n\t\t\tconst lockPos = pillar.add(cornerLock.mul(diagonals[(i + 2) % 4]));\n\t\t\tconsole.log('lockPos', lockPos);\n\t\t\tgrid.set(lockPos, CELL.LOCKED);\n\t\t}\n\t}\n\tgrid.set(start, CELL.POTENTIAL);\n\tconst points = [start];\n\twhile (points.length > 0) {\n\t\tconst posIndex = rand(points.length);\n\t\tconst pos = points[posIndex];\n\t\tconst last = points.pop()!;\n\t\tif (posIndex < points.length) points[posIndex] = last;\n\t\tif (![CELL.POTENTIAL, CELL.DIAG].includes(grid.get(pos))) continue;\n\t\tgrid.set(pos, CELL.FILLED);\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\tif (!grid.isInBounds(near)) continue;\n\t\t\tswitch (grid.get(near)) {\n\t\t\t\tcase CELL.POTENTIAL:\n\t\t\t\t\tgrid.set(near, CELL.LOCKED);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.DIAG:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.EMPTY:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tfor (let j = 0; j < 2; j++) points.push(near);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(diagonals[i]);\n\t\t\tif (!grid.isInBounds(near) || grid.get(near) !== CELL.EMPTY) continue;\n\t\t\tgrid.set(near, CELL.DIAG);\n\t\t\tpoints.push(near);\n\t\t}\n\t}\n\treturn grid.transform((cell) => cell === CELL.FILLED);\n}\n","import { Point } from \"./point\";\nimport { validatePositiveInt } from \"./validators\";\n\nexport class Grid<T> {\n\tpublic get width(): number { return this._width; }\n\tpublic get height(): number { return this._height; }\n\tpublic get size(): Point { return new Point(this.width, this.height); }\n\tprivate _width: number;\n\tprivate _height: number;\n\tprivate _data: T[][];\n\tconstructor(width: number, height: number, fill: (pos: Point) => T) {\n\t\tthis._width = validatePositiveInt(width);\n\t\tthis._height = validatePositiveInt(height);\n\t\tthis._data = new Array(this.width).fill(null).map((_, x) => new Array(this.height).fill(null).map((_, y) => {\n\t\t\treturn fill(new Point(x, y));\n\t\t}));\n\t}\n\tpublic isInBounds(point: Point): boolean {\n\t\treturn point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\n\t}\n\tpublic onlyIfInBounds(point: Point): void { if (!this.isInBounds(point)) throw new Error(\"out of bounds\"); }\n\tpublic get(pos: Point): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y];\n\t}\n\tpublic set(pos: Point, value: T): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y] = value;\n\t}\n\tpublic transform<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): Grid<K> {\n\t\treturn new Grid(this.width, this.height, (pos: Point) => f(this.get(pos), pos, this));\n\t}\n\tpublic map<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): K[] {\n\t\treturn new Array(this.width * this.height).fill(null).map((_, i) => {\n\t\t\tconst x = i % this.width;\n\t\t\tconst y = Math.floor(i / this.width);\n\t\t\tconst pos = new Point(x, y);\n\t\t\treturn f(this.get(pos), pos, this);\n\t\t});\n\t}\n}\n","export function rand(base: number): number {\n\tif (!Number.isSafeInteger(base)) throw new Error('random base is not a safe integer');\n\tif (base <= 0) throw new Error('random base is not positive');\n\treturn Math.floor(Math.random() * base);\n}\n","import React, { Component } from \"react\";\nimport { Grid } from \"../scripts/grid\";\n\nexport default class PatternFill extends Component<{ grid: Grid<boolean> }> {\n\trender() {\n\t\treturn <svg width={512} height={512}>{\n\t\t\tthis.props.grid.map((filled, pos) => !filled ? null : <rect\n\t\t\t\tx={6 + (100 * pos.x)}\n\t\t\t\ty={6 + (100 * pos.y)}\n\t\t\t\twidth={100}\n\t\t\t\theight={100}\n\t\t\t\tfill=\"#4650a0\"\n\t\t\t/>)\n\t\t}</svg>;\n\t}\n}\n","import React, { Component, Fragment } from \"react\";\nimport { neighbors, diagonals } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\nimport { Point } from \"../scripts/point\";\n\nexport default class PatternRaw extends Component<{ grid: Grid<boolean> }> {\n\tdrawCell(pos: Point) {\n\t\tif (!this.props.grid.get(pos)) return null;\n\t\tconst lines = [];\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\tif (this.props.grid.isInBounds(near) && this.props.grid.get(near)) continue;\n\t\t\tconst x1 = 100 * (pos.x + diagonals[i].x / 2) + 56;\n\t\t\tconst y1 = 100 * (pos.y + diagonals[i].y / 2) + 56;\n\t\t\tconst other = diagonals[(i + 3) % 4];\n\t\t\tconst x2 = 100 * (pos.x + other.x / 2) + 56;\n\t\t\tconst y2 = 100 * (pos.y + other.y / 2) + 56;\n\t\t\tlines.push(<line {...{ x1, x2, y1, y2 }} stroke=\"#4650a0\" strokeWidth=\"4\" />);\n\t\t}\n\t\tif (lines.length === 0) return null;\n\t\treturn <Fragment>{lines}</Fragment>;\n\t}\n\n\trender() {\n\t\treturn <svg width={512} height={512}>{\n\t\t\tthis.props.grid.map((_, pos) => this.drawCell(pos))\n\t\t}</svg>;\n\t}\n}\n","import React, { Component } from \"react\";\nimport { generate } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\n\nimport PatternFill from \"./PatternFill\";\nimport PatternRaw from \"./PatternRaw\";\n\nconst size = 5;\n\nexport default class App extends Component<{}, { grid: Grid<boolean>, filled: boolean }> {\n\n\tconstructor(props: App['props'], context: any) {\n\t\tsuper(props, context);\n\t\tthis.state = { grid: generate(size), filled: true };\n\t}\n\n\trender() {\n\t\treturn <div id=\"app\">\n\t\t\t{this.state.filled ? <PatternFill grid={this.state.grid} /> : <PatternRaw grid={this.state.grid} />}\n\t\t\t<div id=\"options\">\n\t\t\t\t<button onClick={() => this.setState({ grid: generate(size) })}>Generate new</button>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Filled</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tdefaultChecked={this.state.filled}\n\t\t\t\t\t\tonChange={(e) => this.setState({ filled: e.target.checked })}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}