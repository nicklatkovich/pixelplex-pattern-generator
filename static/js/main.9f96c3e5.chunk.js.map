{"version":3,"sources":["scripts/random.ts","scripts/validators.ts","scripts/point.ts","scripts/generator.ts","scripts/grid.ts","components/Pattern.tsx","components/App.tsx","index.tsx"],"names":["seed","BN","randomBytes","toString","salt","it","keccak256","setSeed","_seed","rand","base","Number","isSafeInteger","Error","lt","times","pow","plus","result","mod","toNumber","idiv","validateInt","num","validatePositiveInt","CELL","Point","x","y","_x","_y","this","other","add","Math","max","mul","Grid","width","height","fill","_width","_height","_data","Array","map","_","point","isInBounds","pos","onlyIfInBounds","value","f","get","i","floor","pointZero","neighbors","arr","right","bottom","diagonals","possibleCornerLocks","generate","size","grid","EMPTY","start","cornerLocksIndex","length","cornerLocks","pillar","console","log","cornerLock","lockPos","set","LOCKED","POTENTIAL","points","posIndex","last","pop","DIAG","includes","FILLED","near","j","push","transform","cell","Type","Pattern","props","lines","x1","y1","x2","y2","stroke","strokeWidth","fillDefs","mask","id","patternUnits","patternTransform","d","stroke-width","type","STROKE","renderStroke","FILL","renderFill","PATTERN","renderPattern","renderInner","offset","stopColor","filled","Component","defaultSeed","App","context","Buffer","from","state","gradient","defaultValue","onChange","e","target","setState","title","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f96c3e5.chunk.js","sourcesContent":["import keccak256 from \"keccak256\";\nimport { randomBytes } from \"crypto\";\nimport BN from \"bignumber.js\";\n\nlet seed = new BN(randomBytes(32).toString(\"hex\"), 16);\nlet salt = 0;\nlet it = new BN(keccak256(seed.toString(16)).toString(\"hex\"), 16);\n\nexport function setSeed(_seed: Buffer) {\n\tseed = new BN(_seed.toString(\"hex\"), 16);\n\tsalt = 0;\n\tit = new BN(keccak256(seed.toString(16)).toString(\"hex\"), 16);\n}\n\nexport function rand(base: number): number {\n\tif (!Number.isSafeInteger(base)) throw new Error('random base is not a safe integer');\n\tif (base <= 0) throw new Error('random base is not positive');\n\twhile (it.lt(base)) {\n\t\tsalt++;\n\t\tit = it.times(new BN(2).pow(256)).plus(new BN(keccak256(seed.plus(salt).toString(16)).toString(\"hex\"), 16));\n\t}\n\tconst result = it.mod(base).toNumber();\n\tit = it.idiv(base);\n\treturn result;\n}\n","export function validateInt(num: number): number {\n\tif (!Number.isSafeInteger(num)) throw new Error(\"is not a safe integer\");\n\treturn num;\n}\n\nexport function validatePositiveInt(num: number): number {\n\tnum = validateInt(num);\n\tif (num <= 0) throw new Error(\"is not positive\");\n\treturn num;\n}\n","import { validateInt } from \"./validators\";\n\nexport class Point {\n\tstatic get ZERO(): Point { return new Point(0, 0); }\n\tpublic get x(): number { return this._x; }\n\tpublic get y(): number { return this._y; }\n\tprivate _x: number;\n\tprivate _y: number;\n\tconstructor(x: number, y: number) {\n\t\tthis._x = validateInt(x);\n\t\tthis._y = validateInt(y);\n\t}\n\tpublic add(other: Point | number): Point {\n\t\tif (typeof other === \"number\") return this.add(new Point(other, other));\n\t\treturn new Point(this.x + other.x, this.y + other.y);\n\t}\n\tpublic max(other: Point): Point { return new Point(Math.max(this.x, other.x), Math.max(this.y, other.y)); }\n\tpublic mul(other: number | Point): Point {\n\t\tif (typeof other === \"number\") return this.mul(new Point(other, other));\n\t\treturn new Point(this.x * other.x, this.y * other.y);\n\t}\n\tpublic eq(other: Point): boolean { return this.x === other.x && this.y === other.y; }\n}\n","import { Grid } from \"./grid\";\nimport { Point } from \"./point\";\nimport { rand } from \"./random\";\n\nexport enum CELL {\n\tEMPTY = 0,\n\tPOTENTIAL = 1,\n\tFILLED = 2,\n\tLOCKED = 3,\n\tDIAG = 4,\n}\n\nexport const pointZero = new Point(0, 0);\nexport const neighbors: Point[] = [1, 0, -1, 0].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\nexport const [right, top, left, bottom] = neighbors;\nexport const diagonals: Point[] = [1, -1, -1, 1].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\n\nexport const possibleCornerLocks: Point[][] = [\n\t[],\n\t[pointZero],\n\t[pointZero, right],\n\t[pointZero, bottom],\n\t[pointZero, right, bottom],\n];\n\nexport function generate(size: number): Grid<boolean> {\n\tconst grid = new Grid(size, size, () => CELL.EMPTY);\n\tconst start = new Point(rand(grid.width), rand(grid.height));\n\tfor (let i = 0; i < 4; i++) {\n\t\tconst cornerLocksIndex = rand(possibleCornerLocks.length);\n\t\tconst cornerLocks = possibleCornerLocks[cornerLocksIndex];\n\t\tconst pillar = diagonals[i].max(pointZero).mul(grid.size.add(-1));\n\t\tconsole.log('pillar', pillar);\n\t\tfor (const cornerLock of cornerLocks) {\n\t\t\tconsole.log('cornerLock', cornerLock);\n\t\t\tconst lockPos = pillar.add(cornerLock.mul(diagonals[(i + 2) % 4]));\n\t\t\tconsole.log('lockPos', lockPos);\n\t\t\tgrid.set(lockPos, CELL.LOCKED);\n\t\t}\n\t}\n\tgrid.set(start, CELL.POTENTIAL);\n\tconst points = [start];\n\twhile (points.length > 0) {\n\t\tconst posIndex = rand(points.length);\n\t\tconst pos = points[posIndex];\n\t\tconst last = points.pop()!;\n\t\tif (posIndex < points.length) points[posIndex] = last;\n\t\tif (![CELL.POTENTIAL, CELL.DIAG].includes(grid.get(pos))) continue;\n\t\tgrid.set(pos, CELL.FILLED);\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\tif (!grid.isInBounds(near)) continue;\n\t\t\tswitch (grid.get(near)) {\n\t\t\t\tcase CELL.POTENTIAL:\n\t\t\t\t\tgrid.set(near, CELL.LOCKED);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.DIAG:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.EMPTY:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tfor (let j = 0; j < 2; j++) points.push(near);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(diagonals[i]);\n\t\t\tif (!grid.isInBounds(near) || grid.get(near) !== CELL.EMPTY) continue;\n\t\t\tgrid.set(near, CELL.DIAG);\n\t\t\tpoints.push(near);\n\t\t}\n\t}\n\treturn grid.transform((cell) => cell === CELL.FILLED);\n}\n","import { Point } from \"./point\";\nimport { validatePositiveInt } from \"./validators\";\n\nexport class Grid<T> {\n\tpublic get width(): number { return this._width; }\n\tpublic get height(): number { return this._height; }\n\tpublic get size(): Point { return new Point(this.width, this.height); }\n\tprivate _width: number;\n\tprivate _height: number;\n\tprivate _data: T[][];\n\tconstructor(width: number, height: number, fill: (pos: Point) => T) {\n\t\tthis._width = validatePositiveInt(width);\n\t\tthis._height = validatePositiveInt(height);\n\t\tthis._data = new Array(this.width).fill(null).map((_, x) => new Array(this.height).fill(null).map((_, y) => {\n\t\t\treturn fill(new Point(x, y));\n\t\t}));\n\t}\n\tpublic isInBounds(point: Point): boolean {\n\t\treturn point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\n\t}\n\tpublic onlyIfInBounds(point: Point): void { if (!this.isInBounds(point)) throw new Error(\"out of bounds\"); }\n\tpublic get(pos: Point): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y];\n\t}\n\tpublic set(pos: Point, value: T): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y] = value;\n\t}\n\tpublic transform<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): Grid<K> {\n\t\treturn new Grid(this.width, this.height, (pos: Point) => f(this.get(pos), pos, this));\n\t}\n\tpublic map<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): K[] {\n\t\treturn new Array(this.width * this.height).fill(null).map((_, i) => {\n\t\t\tconst x = i % this.width;\n\t\t\tconst y = Math.floor(i / this.width);\n\t\t\tconst pos = new Point(x, y);\n\t\t\treturn f(this.get(pos), pos, this);\n\t\t});\n\t}\n}\n","import React, { Component, Fragment } from \"react\";\nimport { diagonals, neighbors } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\n\nexport enum Type { STROKE, FILL, PATTERN };\n\nexport default class Pattern extends Component<{ type: Type, gradient: boolean, grid: Grid<boolean> }> {\n\trenderStroke() {\n\t\treturn this.props.grid.map((_, pos) => {\n\t\t\tif (!this.props.grid.get(pos)) return null;\n\t\t\tconst lines = [];\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\t\tif (this.props.grid.isInBounds(near) && this.props.grid.get(near)) continue;\n\t\t\t\tconst x1 = 100 * (pos.x + diagonals[i].x / 2) + 56;\n\t\t\t\tconst y1 = 100 * (pos.y + diagonals[i].y / 2) + 56;\n\t\t\t\tconst other = diagonals[(i + 3) % 4];\n\t\t\t\tconst x2 = 100 * (pos.x + other.x / 2) + 56;\n\t\t\t\tconst y2 = 100 * (pos.y + other.y / 2) + 56;\n\t\t\t\tlines.push(<line {...{ x1, x2, y1, y2 }} stroke=\"#4650a0\" strokeWidth=\"4\" />);\n\t\t\t}\n\t\t\tif (lines.length === 0) return null;\n\t\t\treturn <Fragment>{lines}</Fragment>;\n\t\t});\n\t}\n\n\tget fillDefs() {\n\t\treturn <Fragment>\n\t\t\t<linearGradient id=\"gradient\" x1=\"0.01171875\" y1=\"0.98828125\" x2=\"0.98828125\" y2=\"0.01171875\">\n\t\t\t\t<stop offset=\"0%\" stopColor=\"#4b529c\" />\n\t\t\t\t<stop offset=\"100%\" stopColor=\"#88c5b3\" />\n\t\t\t</linearGradient>\n\t\t\t<mask id=\"mask\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.grid.map((filled, pos) => !filled ? null : <rect\n\t\t\t\t\t\tx={6 + (100 * pos.x)}\n\t\t\t\t\t\ty={6 + (100 * pos.y)}\n\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\theight={100}\n\t\t\t\t\t\tfill=\"#fff\"\n\t\t\t\t\t/>)\n\t\t\t\t}\n\t\t\t</mask>\n\t\t</Fragment>\n\t}\n\n\trenderFill() {\n\t\treturn <Fragment>\n\t\t\t<defs>{this.fillDefs}</defs>\n\t\t\t<rect fill=\"url(#gradient)\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" mask=\"url(#mask)\" />\n\t\t</Fragment>;\n\t}\n\n\trenderPattern() {\n\t\treturn <Fragment>\n\t\t\t<defs>\n\t\t\t\t<pattern id=\"line\" patternUnits=\"userSpaceOnUse\" width=\"10\" height=\"10\" patternTransform=\"rotate(-45 2 2)\">\n\t\t\t\t\t<path d=\"M -1,2 l 20,0\" stroke=\"#fff\" stroke-width=\"4\" />\n\t\t\t\t\t{/* <line x1=\"0\" y1=\"10\" x2=\"10\" y2=\"0\" color=\"#fff\" width=\"2\" /> */}\n\t\t\t\t</pattern>\n\t\t\t\t{this.fillDefs}\n\t\t\t\t<mask id=\"pattern-mask\" x=\"0\" y=\"0\" width=\"1\" height=\"1\">\n\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" fill=\"url(#line)\" mask=\"url(#mask)\" />\n\t\t\t\t</mask>\n\t\t\t</defs>\n\t\t\t<rect fill=\"url(#gradient)\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" mask=\"url(#pattern-mask)\" />\n\t\t\t{/* <rect fill=\"red\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" /> */}\n\t\t</Fragment>;\n\t}\n\n\trenderInner() {\n\t\tswitch (this.props.type) {\n\t\t\tcase Type.STROKE: return this.renderStroke();\n\t\t\tcase Type.FILL: return this.renderFill();\n\t\t\tcase Type.PATTERN: return this.renderPattern();\n\t\t\tdefault: return null;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <svg width={512} height={512}>{this.renderInner()}</svg>;\n\t}\n}\n","import React, { Component } from \"react\";\nimport { generate } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\n\nimport Pattern, { Type } from \"./Pattern\";\nimport { setSeed } from \"../scripts/random\";\n\nconst size = 5;\nconst defaultSeed = \"n.latkovich\";\n\nexport default class App extends Component<{}, { grid: Grid<boolean>, type: Type }> {\n\n\tconstructor(props: App['props'], context: any) {\n\t\tsuper(props, context);\n\t\tsetSeed(Buffer.from(defaultSeed));\n\t\tthis.state = { grid: generate(size), type: Type.PATTERN };\n\t}\n\n\trender() {\n\t\treturn <div id=\"app\">\n\t\t\t<Pattern grid={this.state.grid} gradient type={this.state.type} />\n\t\t\t<div id=\"options\">\n\t\t\t\t<input type=\"text\" defaultValue={defaultSeed} onChange={(e) => {\n\t\t\t\t\tsetSeed(Buffer.from(e.target.value));\n\t\t\t\t\tthis.setState({ grid: generate(size) });\n\t\t\t\t}} />\n\t\t\t\t{[\n\t\t\t\t\t{ type: Type.STROKE, title: 'Stroke' },\n\t\t\t\t\t{ type: Type.FILL, title: 'Fill' },\n\t\t\t\t\t{ type: Type.PATTERN, title: 'Pattern' },\n\t\t\t\t].map(({ type, title }) => <div onClick={() => this.setState({ type })}>{title}</div>)}\n\t\t\t</div>\n\t\t</div>;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}