{"version":3,"sources":["scripts/validators.ts","scripts/point.ts","scripts/grid.ts","scripts/generator.ts","components/Pattern.tsx","components/App.tsx","index.tsx","scripts/names.ts","scripts/random.ts","components/Main.tsx","components/SlideShow.tsx","images/logo.svg","images/tagline.svg"],"names":["validateInt","num","Number","isSafeInteger","Error","validatePositiveInt","Point","x","y","_x","_y","this","other","add","Math","max","mul","Grid","width","height","fill","_width","_height","_data","Array","map","_","point","isInBounds","pos","onlyIfInBounds","value","f","get","i","floor","CELL","size","pointZero","neighbors","arr","right","bottom","diagonals","possibleCornerLocks","generate","grid","EMPTY","start","rand","cornerLocksIndex","length","cornerLocks","pillar","console","log","cornerLock","lockPos","set","LOCKED","POTENTIAL","points","posIndex","last","pop","DIAG","includes","FILLED","near","j","push","transform","cell","Type","Pattern","props","lines","x1","y1","x2","y2","stroke","strokeWidth","fillDefs","mask","id","patternUnits","patternTransform","d","stroke-width","type","STROKE","renderStroke","FILL","renderFill","PATTERN","renderPattern","renderInner","offset","stopColor","filled","Component","App","context","state","slideshow","SlideShow","Main","toSlideShow","setState","ReactDOM","render","document","getElementById","names","seed","BN","randomBytes","toString","salt","it","keccak256","setSeed","_seed","base","lt","times","pow","plus","result","mod","toNumber","idiv","defaultSeed","Buffer","from","gradient","defaultValue","onChange","e","target","title","onClick","nameIndex","setInterval","regenerate","src","Logo","alt","TagLine","module","exports"],"mappings":"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","file":"static/js/main.2f0ff0d4.chunk.js","sourcesContent":["export function validateInt(num: number): number {\n\tif (!Number.isSafeInteger(num)) throw new Error(\"is not a safe integer\");\n\treturn num;\n}\n\nexport function validatePositiveInt(num: number): number {\n\tnum = validateInt(num);\n\tif (num <= 0) throw new Error(\"is not positive\");\n\treturn num;\n}\n","import { validateInt } from \"./validators\";\n\nexport class Point {\n\tstatic get ZERO(): Point { return new Point(0, 0); }\n\tpublic get x(): number { return this._x; }\n\tpublic get y(): number { return this._y; }\n\tprivate _x: number;\n\tprivate _y: number;\n\tconstructor(x: number, y: number) {\n\t\tthis._x = validateInt(x);\n\t\tthis._y = validateInt(y);\n\t}\n\tpublic add(other: Point | number): Point {\n\t\tif (typeof other === \"number\") return this.add(new Point(other, other));\n\t\treturn new Point(this.x + other.x, this.y + other.y);\n\t}\n\tpublic max(other: Point): Point { return new Point(Math.max(this.x, other.x), Math.max(this.y, other.y)); }\n\tpublic mul(other: number | Point): Point {\n\t\tif (typeof other === \"number\") return this.mul(new Point(other, other));\n\t\treturn new Point(this.x * other.x, this.y * other.y);\n\t}\n\tpublic eq(other: Point): boolean { return this.x === other.x && this.y === other.y; }\n}\n","import { Point } from \"./point\";\nimport { validatePositiveInt } from \"./validators\";\n\nexport class Grid<T> {\n\tpublic get width(): number { return this._width; }\n\tpublic get height(): number { return this._height; }\n\tpublic get size(): Point { return new Point(this.width, this.height); }\n\tprivate _width: number;\n\tprivate _height: number;\n\tprivate _data: T[][];\n\tconstructor(width: number, height: number, fill: (pos: Point) => T) {\n\t\tthis._width = validatePositiveInt(width);\n\t\tthis._height = validatePositiveInt(height);\n\t\tthis._data = new Array(this.width).fill(null).map((_, x) => new Array(this.height).fill(null).map((_, y) => {\n\t\t\treturn fill(new Point(x, y));\n\t\t}));\n\t}\n\tpublic isInBounds(point: Point): boolean {\n\t\treturn point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\n\t}\n\tpublic onlyIfInBounds(point: Point): void { if (!this.isInBounds(point)) throw new Error(\"out of bounds\"); }\n\tpublic get(pos: Point): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y];\n\t}\n\tpublic set(pos: Point, value: T): T {\n\t\tthis.onlyIfInBounds(pos);\n\t\treturn this._data[pos.x][pos.y] = value;\n\t}\n\tpublic transform<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): Grid<K> {\n\t\treturn new Grid(this.width, this.height, (pos: Point) => f(this.get(pos), pos, this));\n\t}\n\tpublic map<K>(f: (value: T, pos: Point, grid: Grid<T>) => K): K[] {\n\t\treturn new Array(this.width * this.height).fill(null).map((_, i) => {\n\t\t\tconst x = i % this.width;\n\t\t\tconst y = Math.floor(i / this.width);\n\t\t\tconst pos = new Point(x, y);\n\t\t\treturn f(this.get(pos), pos, this);\n\t\t});\n\t}\n}\n","import { Grid } from \"./grid\";\nimport { Point } from \"./point\";\nimport { rand } from \"./random\";\n\nconst size = 5;\n\nexport enum CELL {\n\tEMPTY = 0,\n\tPOTENTIAL = 1,\n\tFILLED = 2,\n\tLOCKED = 3,\n\tDIAG = 4,\n}\n\nexport const pointZero = new Point(0, 0);\nexport const neighbors: Point[] = [1, 0, -1, 0].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\nexport const [right, top, left, bottom] = neighbors;\nexport const diagonals: Point[] = [1, -1, -1, 1].map((x, i, arr) => new Point(x, arr[(i + 1) % 4]));\n\nexport const possibleCornerLocks: Point[][] = [\n\t[],\n\t[pointZero],\n\t[pointZero, right],\n\t[pointZero, bottom],\n\t[pointZero, right, bottom],\n];\n\nexport function generate(): Grid<boolean> {\n\tconst grid = new Grid(size, size, () => CELL.EMPTY);\n\tconst start = new Point(rand(grid.width), rand(grid.height));\n\tfor (let i = 0; i < 4; i++) {\n\t\tconst cornerLocksIndex = rand(possibleCornerLocks.length);\n\t\tconst cornerLocks = possibleCornerLocks[cornerLocksIndex];\n\t\tconst pillar = diagonals[i].max(pointZero).mul(grid.size.add(-1));\n\t\tconsole.log('pillar', pillar);\n\t\tfor (const cornerLock of cornerLocks) {\n\t\t\tconsole.log('cornerLock', cornerLock);\n\t\t\tconst lockPos = pillar.add(cornerLock.mul(diagonals[(i + 2) % 4]));\n\t\t\tconsole.log('lockPos', lockPos);\n\t\t\tgrid.set(lockPos, CELL.LOCKED);\n\t\t}\n\t}\n\tgrid.set(start, CELL.POTENTIAL);\n\tconst points = [start];\n\twhile (points.length > 0) {\n\t\tconst posIndex = rand(points.length);\n\t\tconst pos = points[posIndex];\n\t\tconst last = points.pop()!;\n\t\tif (posIndex < points.length) points[posIndex] = last;\n\t\tif (![CELL.POTENTIAL, CELL.DIAG].includes(grid.get(pos))) continue;\n\t\tgrid.set(pos, CELL.FILLED);\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\tif (!grid.isInBounds(near)) continue;\n\t\t\tswitch (grid.get(near)) {\n\t\t\t\tcase CELL.POTENTIAL:\n\t\t\t\t\tgrid.set(near, CELL.LOCKED);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.DIAG:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CELL.EMPTY:\n\t\t\t\t\tgrid.set(near, CELL.POTENTIAL);\n\t\t\t\t\tfor (let j = 0; j < 2; j++) points.push(near);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst near = pos.add(diagonals[i]);\n\t\t\tif (!grid.isInBounds(near) || grid.get(near) !== CELL.EMPTY) continue;\n\t\t\tgrid.set(near, CELL.DIAG);\n\t\t\tpoints.push(near);\n\t\t}\n\t}\n\treturn grid.transform((cell) => cell === CELL.FILLED);\n}\n","import React, { Component, Fragment } from \"react\";\nimport { diagonals, neighbors } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\n\nexport enum Type { STROKE, FILL, PATTERN };\n\nexport default class Pattern extends Component<{ type: Type, gradient: boolean, grid: Grid<boolean> }> {\n\trenderStroke() {\n\t\treturn this.props.grid.map((_, pos) => {\n\t\t\tif (!this.props.grid.get(pos)) return null;\n\t\t\tconst lines = [];\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst near = pos.add(neighbors[i]);\n\t\t\t\tif (this.props.grid.isInBounds(near) && this.props.grid.get(near)) continue;\n\t\t\t\tconst x1 = 100 * (pos.x + diagonals[i].x / 2) + 56;\n\t\t\t\tconst y1 = 100 * (pos.y + diagonals[i].y / 2) + 56;\n\t\t\t\tconst other = diagonals[(i + 3) % 4];\n\t\t\t\tconst x2 = 100 * (pos.x + other.x / 2) + 56;\n\t\t\t\tconst y2 = 100 * (pos.y + other.y / 2) + 56;\n\t\t\t\tlines.push(<line {...{ x1, x2, y1, y2 }} stroke=\"#4650a0\" strokeWidth=\"4\" />);\n\t\t\t}\n\t\t\tif (lines.length === 0) return null;\n\t\t\treturn <Fragment>{lines}</Fragment>;\n\t\t});\n\t}\n\n\tget fillDefs() {\n\t\treturn <Fragment>\n\t\t\t<linearGradient id=\"gradient\" x1=\"0.01171875\" y1=\"0.98828125\" x2=\"0.98828125\" y2=\"0.01171875\">\n\t\t\t\t<stop offset=\"0%\" stopColor=\"#4b529c\" />\n\t\t\t\t<stop offset=\"100%\" stopColor=\"#88c5b3\" />\n\t\t\t</linearGradient>\n\t\t\t<mask id=\"mask\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.grid.map((filled, pos) => !filled ? null : <rect\n\t\t\t\t\t\tx={6 + (100 * pos.x)}\n\t\t\t\t\t\ty={6 + (100 * pos.y)}\n\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\theight={100}\n\t\t\t\t\t\tfill=\"#fff\"\n\t\t\t\t\t/>)\n\t\t\t\t}\n\t\t\t</mask>\n\t\t</Fragment>\n\t}\n\n\trenderFill() {\n\t\treturn <Fragment>\n\t\t\t<defs>{this.fillDefs}</defs>\n\t\t\t<rect fill=\"url(#gradient)\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" mask=\"url(#mask)\" />\n\t\t</Fragment>;\n\t}\n\n\trenderPattern() {\n\t\treturn <Fragment>\n\t\t\t<defs>\n\t\t\t\t<pattern id=\"line\" patternUnits=\"userSpaceOnUse\" width=\"10\" height=\"10\" patternTransform=\"rotate(-45 2 2)\">\n\t\t\t\t\t<path d=\"M -1,2 l 20,0\" stroke=\"#fff\" stroke-width=\"1.5\" />\n\t\t\t\t\t{/* <line x1=\"0\" y1=\"10\" x2=\"10\" y2=\"0\" color=\"#fff\" width=\"2\" /> */}\n\t\t\t\t</pattern>\n\t\t\t\t{this.fillDefs}\n\t\t\t\t<mask id=\"pattern-mask\" x=\"0\" y=\"0\" width=\"1\" height=\"1\">\n\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" fill=\"url(#line)\" mask=\"url(#mask)\" />\n\t\t\t\t</mask>\n\t\t\t</defs>\n\t\t\t<rect fill=\"url(#gradient)\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" mask=\"url(#pattern-mask)\" />\n\t\t\t{/* <rect fill=\"red\" x=\"0\" y=\"0\" width=\"512\" height=\"512\" /> */}\n\t\t</Fragment>;\n\t}\n\n\trenderInner() {\n\t\tswitch (this.props.type) {\n\t\t\tcase Type.STROKE: return this.renderStroke();\n\t\t\tcase Type.FILL: return this.renderFill();\n\t\t\tcase Type.PATTERN: return this.renderPattern();\n\t\t\tdefault: return null;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <svg width={512} height={512}>{this.renderInner()}</svg>;\n\t}\n}\n","import React, { Component } from \"react\";\n\nimport Main from \"./Main\";\nimport SlideShow from \"./SlideShow\";\n\nexport default class App extends Component<{}, { slideshow: boolean }> {\n\tconstructor(props: App['props'], context: any) {\n\t\tsuper(props, context);\n\t\tthis.state = { slideshow: false }\n\t}\n\trender() {\n\t\treturn <div id=\"app\">\n\t\t\t{this.state.slideshow ? <SlideShow /> : <Main toSlideShow={() => this.setState({ slideshow: true })} />}\n\t\t</div>;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { rand } from \"./random\";\n\nexport const names = [\n\t'a.zimnitski',\n\t'Alena Alekhno',\n\t'Ales Pazniak',\n\t'Alexander Eskin',\n\t'Alexander Suslikov',\n\t'Alexandra Gavrilova',\n\t'Alexei Dulub',\n\t'Alexey Chopik',\n\t'Alex Zhakov',\n\t'Alina Lozyuk',\n\t'Anastasia Gotovchits',\n\t'Anastasia Rudenko',\n\t'Anastasiya Dorogokupets',\n\t'Andrei Astrouski',\n\t'Andrei Skachkou',\n\t'Andrew Suvalov',\n\t'Andrey Chembrovich',\n\t'Andrey Fedorovich',\n\t'Andrey Grod',\n\t'Andrey Kosobutskiy',\n\t'Andrey Romanyuk',\n\t'Anna Rak',\n\t'Anton Boltach',\n\t'Anton Shkinder',\n\t'Anzhy Cherniavsky',\n\t'Artemy Markovsky',\n\t'Artsiom Dziaryba',\n\t'Daria Korsik',\n\t'Daria Pechkovskaya,',\n\t'Darya Korsak',\n\t'Darya Pulyak',\n\t'Darya Shimanchik',\n\t'Dmitriy Bushuev',\n\t'Dmitry Bulka',\n\t'Dmitry Karpushkin',\n\t'Dmitry Kostenko',\n\t'Dmitry Parchinsky',\n\t'Dmitry Siziakin',\n\t'Dmitry Volynets',\n\t'Eduard Topchyan',\n\t'Egor Nickolayenya',\n\t'Elena Mastitskaya',\n\t'Eugene Bogdanov',\n\t'Eugene Pavlovets',\n\t'Eugene Vasilyev',\n\t'Eugenia Didenko',\n\t'i.klimko',\n\t'i.sharipova',\n\t'Igor Dulub',\n\t'Ilya Biyumen',\n\t'Irina Klimovich',\n\t'Ivan Makarevich',\n\t'Izabel Shchetsko',\n\t'Kirill Babiak',\n\t'Kirill Plyshevsky',\n\t'Kirill Volkov',\n\t'Ladutko Sergey',\n\t'Maksim Mikhno',\n\t'Maxim Brishten',\n\t'Maxim Ignatow',\n\t'Maxim Perenesenko',\n\t'Mikhail Shautsou',\n\t'Nikita Fedorenko',\n\t'Nikita Latkovich',\n\t'Nikita Pevnev',\n\t'Nikolai Borsuk',\n\t'Olga Ermolovich',\n\t'Olga Yankina',\n\t'Pavel Tsikhanavets',\n\t'Petr Gorban',\n\t'Rodion Tereshkov',\n\t'Sergey Furs',\n\t'Sergey Kilochytsky',\n\t'Sergey Krupenich',\n\t'Siarhei Siniak',\n\t'Timur Abubakarov',\n\t'Vadim Voloshanov',\n\t'Vera Yakovleva',\n\t'Victoria Lisowskaya',\n\t'Viktor Pulyak',\n\t'Viktoryia Vorsa',\n\t'Vitaly Krasutsky',\n\t'Vladimir Lebedevich',\n\t'Vladimir Sharaev',\n\t'Vlad Voropaev',\n\t'Yaroslav Sidoruk',\n\t'Yulia Gushchina',\n];\n\nexport function getRandomName() { return names[rand(names.length)]; }\n","import keccak256 from \"keccak256\";\nimport { randomBytes } from \"crypto\";\nimport BN from \"bignumber.js\";\n\nlet seed = new BN(randomBytes(32).toString(\"hex\"), 16);\nlet salt = 0;\nlet it = new BN(keccak256(seed.toString(16)).toString(\"hex\"), 16);\n\nexport function setSeed(_seed: Buffer) {\n\tseed = new BN(_seed.toString(\"hex\"), 16);\n\tsalt = 0;\n\tit = new BN(keccak256(seed.toString(16)).toString(\"hex\"), 16);\n}\n\nexport function rand(base: number): number {\n\tif (!Number.isSafeInteger(base)) throw new Error('random base is not a safe integer');\n\tif (base <= 0) throw new Error('random base is not positive');\n\twhile (it.lt(base)) {\n\t\tsalt++;\n\t\tit = it.times(new BN(2).pow(256)).plus(new BN(keccak256(seed.plus(salt).toString(16)).toString(\"hex\"), 16));\n\t}\n\tconst result = it.mod(base).toNumber();\n\tit = it.idiv(base);\n\treturn result;\n}\n","import React, { Component, Fragment } from \"react\";\nimport { generate } from \"../scripts/generator\";\nimport { Grid } from \"../scripts/grid\";\nimport { setSeed } from \"../scripts/random\";\nimport Pattern, { Type } from \"./Pattern\";\n\nconst defaultSeed = \"n.latkovich\";\n\nexport default class Main extends Component<{ toSlideShow: () => any }, { grid: Grid<boolean>, type: Type }> {\n\tconstructor(props: Main['props'], context: any) {\n\t\tsuper(props, context);\n\t\tsetSeed(Buffer.from(defaultSeed));\n\t\tthis.state = { grid: generate(), type: Type.PATTERN };\n\t}\n\n\trender() {\n\t\treturn <Fragment>\n\t\t\t<Pattern grid={this.state.grid} gradient type={this.state.type} />\n\t\t\t<div id=\"options\">\n\t\t\t\t<input type=\"text\" defaultValue={defaultSeed} onChange={(e) => {\n\t\t\t\t\tsetSeed(Buffer.from(e.target.value));\n\t\t\t\t\tthis.setState({ grid: generate() });\n\t\t\t\t}} />\n\t\t\t\t{[\n\t\t\t\t\t{ type: Type.STROKE, title: 'Stroke' },\n\t\t\t\t\t{ type: Type.FILL, title: 'Fill' },\n\t\t\t\t\t{ type: Type.PATTERN, title: 'Pattern' },\n\t\t\t\t].map(({ type, title }) => <div onClick={() => this.setState({ type })}>{title}</div>)}\n\t\t\t\t<div onClick={() => this.props.toSlideShow()}>SlideShow</div>\n\t\t\t</div>\n\t\t</Fragment>;\n\t}\n}\n","import { randomBytes } from \"crypto\";\nimport React, { Component } from \"react\";\nimport { names } from \"../scripts/names\";\nimport { rand, setSeed } from \"../scripts/random\";\nimport { Grid } from \"../scripts/grid\";\nimport { generate } from \"../scripts/generator\";\nimport Logo from \"../images/logo.svg\";\nimport TagLine from \"../images/tagline.svg\";\nimport Pattern, { Type } from \"./Pattern\";\n\nexport default class SlideShow extends Component<{}, { nameIndex: number, grid: Grid<boolean> }> {\n\tconstructor(props: SlideShow['props'], context: any) {\n\t\tsuper(props, context);\n\t\tsetSeed(randomBytes(32));\n\t\tconst nameIndex = rand(names.length);\n\t\tsetSeed(Buffer.from(names[nameIndex]));\n\t\tthis.state = { nameIndex, grid: generate() };\n\t\tsetInterval(() => this.regenerate(), 3.5e3);\n\t}\n\n\tregenerate() {\n\t\tsetSeed(randomBytes(32));\n\t\tconst nameIndex = (this.state.nameIndex + rand(names.length - 1)) % names.length;\n\t\tsetSeed(Buffer.from(names[nameIndex]));\n\t\tthis.setState({ nameIndex, grid: generate() });\n\t}\n\n\trender() {\n\t\treturn <div id=\"slideshow\">\n\t\t\t<Pattern grid={this.state.grid} gradient type={Type.PATTERN} />\n\t\t\t<img src={Logo} id=\"logo\" alt=\"\" />\n\t\t\t<img src={TagLine} id=\"tagline\" alt=\"\" />\n\t\t\t<div id=\"name\">{names[this.state.nameIndex]}</div>\n\t\t</div>;\n\t}\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.4510bc10.svg\";","module.exports = __webpack_public_path__ + \"static/media/tagline.aa77d7ed.svg\";"],"sourceRoot":""}